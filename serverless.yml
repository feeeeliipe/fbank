service: fbank

plugins:
  - serverless-plugin-typescript
  - serverless-localstack
  - serverless-dynamodb-local
  - serverless-offline
  
provider:
  profile: personal
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'devel'}
  environment:
    ACCOUNT_TABLE_NAME: ${self:provider.stage}-fbank-accounts
    STAGE: ${self:provider.stage}
    ACCOUNT_SNS: { "Fn::Join" : ["", ["arn:aws:sns:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:provider.stage}-fbank-account" ] ]  }
    ENTRY_SNS: { "Fn::Join" : ["", ["arn:aws:sns:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:provider.stage}-fbank-entry" ] ]  }
    CREDIT_ANALYSIS_SNS: { "Fn::Join" : ["", ["arn:aws:sns:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:provider.stage}-fbank-credit-analysis" ] ]  }
    NOTIFICATION_SNS: { "Fn::Join" : ["", ["arn:aws:sns:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:provider.stage}-fbank-notifications" ] ]  }
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:Query"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
          Resource:
            Fn::GetAtt: [AccountTable, Arn]
        - Effect: Allow
          Action:
            - "dynamodb:Query"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
          Resource:
            Fn::GetAtt: [CreditAnalyzerTable, Arn]
        - Effect: Allow
          Action:
            - "sns:Publish"
          Resource: { "Fn::Join" : ["", ["arn:aws:sns:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:provider.stage}-fbank-account" ] ]  }

custom:
  dynamodb:
    stages:
      - devel
    start:
      migrate: true
  localstack:
    stages:
      - local
    docker:
      sudo: False
  stages:
    - devel
    - local

functions:
  # Account Service Functions
  createAccount:
    handler: services/account-service/src/presentation/CreateAccountApi.handler
    events:
      - http:
          method: post
          path: accounts
  updateAccountWage:
    handler: services/account-service/src/presentation/UpdateAccountWageApi.handler
    events:
      - http:
          method: PUT
          path: accounts/{id}
  # Credit Analyzer Service Functions
  accountSqsEventsHandler:
    handler: services/credit-analyzer-service/src/events/SQSEventManager.handler
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: [CreditAnalyzerServiceAccountsQueue, Arn]
  creditAnalysisSqsEventsHandler:
    handler: services/credit-analyzer-service/src/events/SQSEventManager.handler
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: [CreditAnalyzerServiceCreditAnalysisQueue, Arn]
  # Entry Service Functions
  createEntryApi: 
    handler: services/entry-service/src/presentation/EntryAPI.createEntry
    events:
      - http:
          method: post
          path: entries
          cors: true
  createdEntrySagaOrchestrator:
    handler: services/entry-service/src/sagas/created-entry-saga/CreatedEntrySagaOrchestrator.handleSagaStep
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: [CreatedEntrySagaQueue, Arn]
  # Notification Service Functions
  notificationEventsHandler:
    handler: services/notification-service/src/events/SQSEventManager.handler
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: [NotificationsQueue, Arn]

resources:
  Resources:
    ${file(./serverless.resources.yml)}
